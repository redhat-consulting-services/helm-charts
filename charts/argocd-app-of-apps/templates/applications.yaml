{{- range $key,$val := .Values.applications }}
{{- if hasKey $val "enabled" | required (printf "An enabled key for application %s is required" $key) }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  {{- /* if the appSuffix was not defined, use the key as name */}}
  {{- /* if the appSuffix was defined, use the key as name if it has the suffix */}}
  {{- /* otherwise, append the suffix to the key */}}
  {{- if or (not $.Values.appSuffix) ($val.skipGlobalSuffix | default false) }}
  name: {{ $key }}
  {{- else }}
  {{- if hasSuffix $.Values.appSuffix $key }}
  name: {{ $key | quote }}
  {{- else }}
  name: {{ printf "%s-%s" $key $.Values.appSuffix | quote }}
  {{- end }}
  {{- end }}
  namespace: {{ $val.namespace | default $.Values.default.application.namespace }}

  {{- with (merge ($val.labels | default (dict)) ($.Values.default.labels | default (dict))) }}
  labels:
    {{- (merge ($val.labels | default (dict)) ($.Values.default.labels | default (dict))) | toYaml | nindent 4 }}
  {{- end }}

  {{- with (merge ($val.annotations | default (dict)) ($.Values.default.annotations | default (dict))) }}
  annotations:
    {{- . | toYaml | nindent 4 }}
  {{- end }}

  {{- with (concat ($val.finalizers | default (list)) ($.Values.default.finalizers | default (list))) }}
  finalizers:
    {{- . | toYaml | nindent 4 }}
  {{- end }}
spec:
  destination:
    {{- $val.destination | default $.Values.default.application.destination | toYaml | nindent 4 }}
  project: {{ $val.project | default $.Values.default.application.project | required (printf "No project specified for %s" $key ) }}

  {{- if or ($val.syncPolicy | default dict) ($.Values.default.application.syncPolicy | default dict) }}
  syncPolicy:
    {{- if and $val.syncPolicy $val.syncPolicy.automated }}
    automated:
      {{- $val.syncPolicy.automated | toYaml | nindent 6 }}
    {{- else if and $.Values.default.application.syncPolicy ($.Values.default.application.syncPolicy.automated | default dict) }}
    automated:
      {{- $.Values.default.application.syncPolicy.automated | toYaml | nindent 6 }}
    {{- end }}

    {{- if and $val.syncPolicy $val.syncPolicy.retry }}
    retry:
      {{- $val.syncPolicy.retry | toYaml | nindent 6 }}
    {{- else if and $.Values.default.application.syncPolicy ($.Values.default.application.syncPolicy.retry | default dict) }}
    retry:
      {{- $.Values.default.application.syncPolicy.retry | toYaml | nindent 6 }}
    {{- end }}

    {{- if and $val.syncPolicy $val.syncPolicy.syncOptions }}
    syncOptions:
      {{- $val.syncPolicy.syncOptions | toYaml | nindent 6 }}
    {{- else if and $.Values.default.application.syncPolicy ($.Values.default.application.syncPolicy.syncOptions | default dict) }}
    syncOptions:
      {{- $.Values.default.application.syncPolicy.syncOptions | toYaml | nindent 6 }}
    {{- end }}
  {{- end }}

  {{- if not (gt (len ($val.sources | default dict)) 0) }}
  {{- with $val.source }}
  source:
    {{- if or (not $.Values.appSourceBasePath) (.ignoreBasePath | default false) }}
    path: {{ .path | quote }}
    {{- else }}
    path: {{ printf "%s/%s" (trimSuffix "/" $.Values.appSourceBasePath) (trimPrefix "/" .path) | quote }}
    {{- end }}
    repoURL: {{ .repoURL | default $.Values.default.application.source.repoURL | required (printf "No source.repoURL specified for %s" $key ) }}
    targetRevision: {{ .targetRevision | default $.Values.default.application.source.targetRevision | required (printf "No source.targetRevision specified for %s" $key ) }}
  {{- end }}
  {{- end }}

  {{- with $val.sources }}
  sources:
  {{- range $source := . }}
    - repoURL: {{ .repoURL | required (printf "No sources.repoURL specified for repoURL") }}
      targetRevision: {{ .targetRevision | required (printf "No sources.targetRevision specified for targetRevision") }}
      chart: {{ .chart | default "null" }}
      ref: {{ .ref | default "null" }}
      {{- with .helm }}
      helm:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{/* check for appSourcebasePath */}}
      {{- if or (not $.Values.appSourceBasePath) ($source.ignoreBasePath | default false) }}
      path: {{ $source.path | default "null" }}
      {{- else }}
      path: {{ printf "%s/%s" (trimSuffix "/" $.Values.appSourceBasePath) (trimPrefix "/" $source.path) | quote }}
      {{- end }}
  {{- end }} {{/* end for range */}}
  {{- end }} {{/* end for with $val.sources */}}

  {{- with $val.extraFields }}
  {{ tpl . | nindent 2 }}
  {{- end }}
{{- end }}
{{- end }}
